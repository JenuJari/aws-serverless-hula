# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-hula

plugins:
# - serverless-domain-manager
  - serverless-secrets-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  profile: serverless-deployer
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "iot:Connect"
        - "iot:Publish"
        - "iot:Subscribe"
        - "iot:Receive"
        - "iot:GetThingShadow"
        - "iot:UpdateThingShadow"
        - "rds:*"
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"

custom:
  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}
  # customDomain:
  #   domainName: <registered_domain_name>
  #   basePath: ''
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true
  #   #https://serverless.com/blog/serverless-api-gateway-domain/

functions:

  authorizerFunc:
    handler: handler.auth
    vpc:
      securityGroupIds:
        - ${self:custom.secrets.RDS_SECURITY_GROUP_ID}
      subnetIds:
        - ${self:custom.secrets.RDS_SUBNET_1}
        - ${self:custom.secrets.RDS_SUBNET_2}
        - ${self:custom.secrets.RDS_SUBNET_3}
        - ${self:custom.secrets.RDS_SUBNET_4}
    environment:
      MYSQL_HOST: ${self:custom.secrets.MYSQL_HOST}
      MYSQL_USER: ${self:custom.secrets.MYSQL_USER}
      MYSQL_PASSWORD: ${self:custom.secrets.MYSQL_PASSWORD}
      MYSQL_DATABASE: ${self:custom.secrets.MYSQL_DATABASE}


  hello:
    handler: handler.hello
    events:
      - http:
          method: GET
          path: /
          cors: true

  secure:
    handler: handler.secure
    events:
      - http: OPTIONS /secure
      - http:
          method: GET
          path: /secure
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  notifyDisconnect:
    handler: src/notifyDisconnect.handler
    events:
      - iot:
          sql: "SELECT * FROM 'last-will'"
    environment:
      IOT_AWS_REGION: ${self:custom.secrets.IOT_AWS_REGION}
      IOT_ENDPOINT_HOST: ${self:custom.secrets.IOT_ENDPOINT_HOST}
  
  notifyProductClaimed : 
    handler : src/hulaApi/controllers/sale.PublishClaimedEvent
    events:
      - http: OPTIONS /api/sale/product-claimed
      - http:
          method: POST
          path: /api/sale/product-claimed
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
    environment:
      IOT_AWS_REGION: ${self:custom.secrets.IOT_AWS_REGION}
      IOT_ENDPOINT_HOST: ${self:custom.secrets.IOT_ENDPOINT_HOST}
  
  notifyGeneric : 
    handler : src/notifyDisconnect.genericEndPoint
    events:
      - http: OPTIONS /api/common/generic-endpoint
      - http:
          method: POST
          path: /api/common/generic-endpoint
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
    environment:
      IOT_AWS_REGION: ${self:custom.secrets.IOT_AWS_REGION}
      IOT_ENDPOINT_HOST: ${self:custom.secrets.IOT_ENDPOINT_HOST}

  iotPresignedUrl:
    handler: src/iotPresignedUrl.handler
    events:
      - http: OPTIONS /iot-presigned-url
      - http:
          method: GET
          path: /iot-presigned-url
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
    environment:
      IOT_AWS_REGION: ${self:custom.secrets.IOT_AWS_REGION}
      IOT_ENDPOINT_HOST: ${self:custom.secrets.IOT_ENDPOINT_HOST}
      IOT_ACCESS_KEY: ${self:custom.secrets.IOT_ACCESS_KEY}
      IOT_SECRET_KEY: ${self:custom.secrets.IOT_SECRET_KEY}
